Сопроцессор --- бяка. Надо SSE

SSE мы пройдём попозже. В SSE есть только float и double. extended нет.
тригонометрии нет. населена роботами

Есть ещё MMX (MultiMedia Extension) --- специализированный набор команд для 

Регистры mm0-mm7. они 64-битные. 1x64, 2x32, 4x16, 8x8

paddw mm0, mm1 :
 mm0[0] += mm1[0]
 mm0[1] += mm1[1]
 mm0[2] += mm1[2]
 mm0[3] += mm1[3]

идея mmx в том, что одна команда делает действие сразу по нескольким наборам
данных

Благодаря mmx стало возможным в реалтайме декодировать видео

movq --- перенос qword-а
movd --- dword movq, можно фигачить обычные регистры. старшие 32 бита
mmx-регистра зануляются

отныне команды начинаются с буквы p

pack[sswb|ssdw|uswb] 
packssdw mm1, mm2:
 исходные регистры mm1, mm2 интерпретируются как хранящие по два 32бит
 значения. 
 mm1@16[0] = mm1@32[0]
 mm1@16[1] = mm1@32[1]
 mm1@16[2] = mm2@32[0]
 mm1@16[3] = mm2@32[1]
ss --- с сохраниением знака и нормировкой на MIN_VAL и MAX_VAL
us --- беззнаковое

punpck[L|H][BW|WD|DQ] -- low/high
punpckhwd mm1, mm2 :
 mm1@16[0] = mm2@16[0]
 mm1@16[1] = mm2@16[1]
 mm1@16[2] = mm1@16[0]
 mm1@16[3] = mm1@16[1]

p[add|sub][|s|us][b|w|d] --- сложение/вычитание просто/со знаковым насыщением/с беззнаковым
насыщением байтов/слов/дслов

pmul[lw|hw] --- записать младшие 16 бит результата/старшие 16 бит результа,
считая, что было со знаком

pmaddwd 
pmaddwd mm1, mm2
 mm1@32[0] = mm1@16[0] * mm2@16[0] + mm1@16[1] * mm2@16[1]
 mm1@32[1] = mm1@16[2] * mm2@16[2] + mm1@16[3] * mm2@16[3]

Деления нет :(


Есть набор команд логики

pandn - НЕ И
Обнулять - только xor-ы, ибо загрузки констант нет

Есть набор команд сдвига
psll[w|d|q] -- shift left logical
psrl[w|d|q] -- shift right 
сдвига байтов нет :(
счётчик сдвига -- только константа

pcmp[eq|gt][b|w|d] -- равно ли/больше ли 
 результат пишется в первый операнд. если сравнение выполняется, значение
 ставится во все единички, иначе -- во все нолики

mmx - регистры --- младшие 64бит R0-R7

ОДНОВРЕМЕННО СЧИТАТЬ НА FPU И MMX НЕ ПОЛУЧИТСЯ!!!!!!!!

emms --- закончить работу на mmx, разрешить сопроцессор. пометить все регистры
Rx как свободные

mmx закончился. дальше sse

FPU тормозаааа, mmx --- хорошо!

Расширение mmx --- 3DNow! Именно с восклицательным знаком

В Pentium3 появилось SSE --- 8 совершенно новых 128-битных регистров. (4x32 only) 

pavg[b|w] -- среднее арифметическое по байтам/словам с округлением вверх

самый простой способ поделить байты пополам -- среднее арифметическое с нулём

pinsrw mm0, [eax], 3 --- слово по адресу eax будет записано в mm0@16[3] 
pextrw

p[min|max][ub|sw] --- минимум/максимум из байт без знака или слов со знаком


pmovmskb
младшие 8 бит регистра общего назначения записываются в

pmulhuw -- получить старшую часть результата, если умножали беззнаково

psadbw -- найти сумму абсолютных разностей, результат -- в младшую часть
регистра общего назначения

pshufw -- хитрожопое копирование 
pshufw mm0, mm1, X -- в mm0 копируются слова из mm1, проиндексированные X

несколько хитрых команд пересылки данных следующего вида
movntq, maskmovq, sfence, prefetch[t0|t1|t2|nta|

movntq = mov non-temporal qword --- запись данныхв в память, минуя кэш. Идёт
на отличненько для потоковой обработки данных

maskmovq = тоже запись минуя кеш. пишет в адрес [edi] --- запись только тех
байтов первого регистра, для которых во втором регистре ноль. на практике
как-то не очень идёт :(

sfence = барьер записи. сама по себе ничего не делает. Гарантирует, что все
non-temporal записи будут в памяти после того, как она выполнится. Борьба с
рассинхронизацией

lfence, mfence = команды синхронизации чтения/чтения-записи

mfence /= sfence + lfence, так как процессор возьмёт, переставит команды и всё
сломается

prefetch -- ничего не делает, но подсказывает кеш-подсистеме, что скоро тут
будут читать

prefetchw -- подсказка, что скоро тут будут писать

prefetch[t0,t1,t2,nta] 
 t0 : подсказка, что хорошо бы загрузить данные как можно ближе
 t1 : поближе, но не в level1
 t2 : поближе, но не в level[1|2]
 nta : в кеш non-temporal данных (ШТО ЭТО?) 

3dNow! устарело и не нужно. оно поглощено sse

задание -- наложить две картинки друг на друга (BMP) и как-нибудь
скомбинировать (например, умножать. ну и бред)

