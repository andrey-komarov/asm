ЗАЩИЩЁННЫЙ РЕЖИМ

В 80286 ввели защищённый режим

Три кольца доступа --- нулевое, первое, второе, третье
Нулевое --- драйвера/система
Третье --- пользователь

Система может запретить третьему кольцу что-нибудь делатьi

Адрес состоит из сегмента и смещения. И то, и другое -- 16бит

cs, ds, es, ss, (fs), (gs) --- 16бит регистры, до сих пор существуют 
и всё ещё 16битные

seg * 10h + off --- адрес

Можем адресовать 0xffffffff * 0x10 + 0xffffffff > 1MiB 
Переполнение по модулярной арифметике

[bx|bp + si|di + off] --- 16бит адрес
умолчания. если не указан сегмент по умолчанию, берётся ds, кроме как если
обращение через bp. тогда умолчание -- ss

cs --- code segment
ds --- data segment
es --- extended segment
ss --- stack segment
    при push/pop полный адрес ss:sp

16битный мир закончился!!!

Адресация
[eax|ecx|ebx|edx|esp|eip|ebp|edi + 1|2|4|8 * \{esp} + off]
почти всегда умолчание сегмента -- ds
    ss --- для ebp, esp

[ebp + eax] --- умолчание --- ss
[eax + ebs] --- умолчание --- ds
yasm-у можно намекнуть, кто база, а кто -- индекс, а то 
ассемблер может перепутать
[ebp + eax * 1] --- тадааам!

В защищённом режиме поменяли значения сегментов
Теперь это не циферка, а структурка
Биты с 15 по 3 --- некий номер в таблице
2 --- LDT или GDT -- local/global descriptor table. local никому не нужен
1,0 --- RPL(права доступа)
...

Табличка хранит 8-байтный структурки, которые описывают сегменты
По второму биту определить, какую таблицу смотреть
Старшие 13 бит определяют номер структуры в выбранной таблице
а эта структура уже хранит кучу информации об этом сегменте

Есть 32битная база --- где сегмент начинается
20бит лимит --- размер сегмента
1бит градулярности(чо?) --- как интерпретируется этот лимит: в байтах или в
4килобайтовых кусках

0x66 --- переключить разрядность данных следующей команды 16/32
0x67 --- переключить разрядность адреса следующей команды 16/32
Нам эти циферки втыкать не надо :)

Маленький цикл выполняется быстрее, если начинается с адреса, кратного 16
Нопы делаются ~3 за такт.
То есть, 15 нопов --- ~5 тактов
0x66 NOP --- 2байтовый nop. работает всё ещё за 1/3 такта
0x66 0x66 0x66 nop --- 4байтовый nop

...
1бит доступа. можно ли сюды
 dpl --- права 
1бит разрешения чтения для кода/разрешения для записи данных
1бит --- сегмент это кода или данных
1бит --- бит подчинения для кода/расширения вниз для данных --- прочитать, а
 то ничего не понятно

Но эта модель неудобна для стека

ldt не используется

TEB

регистр idtr -- interrupt descriptor
регистр tr -- регистр задачи
команда str -- save tr register
не особо используются

как происходит переключение в защищённый режим? как процессор определяет, в
каком режиме он работает?

у него есть набор управляющих регистров cr0 с флажками <режим работы>
cr1 -- есть, но нельзя. при обращении -- исключение
cr2, cr3 --- про страничную адресацию
начиная с pentium -- cr4, страничная адресация, TSD, ...

команда rdtsc -- в edx:eax записывает количество тактов процессора с момента
его включения/сброса

DR0-3 -- адреса останова
DR4-5 -- нет таких
DR6 -- причина останова
DR7 -- управление отладкой --- что активно и их тип

можно поставить 4 аппаратных точки останова: по
выволнению/записи/чтению-записи на байт/слово/дслово на кратный адреса

int3 --- вызов отладчика. следующей командой программа вызовет отладчик
отладчик меняет код программы. злая программа определит, что её отлаживают

аппаратные точки останова злая программа поймать не сможет

практика -- посмотреть на аппаратные точки останова
