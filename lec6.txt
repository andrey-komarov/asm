AMD64 = x86_64 = x64

AMD слепили 64битного монстра

расширены регистры
eax -> rax 

rflags -- ничего интересного не добавили

eip -> rip

+8 новых регистров общего назначения:
R8--R15
делить на кусочки можно:
R8D -- младший dword
R8W -- младший word
R8B -- младшие 8 бит

про это даже на википедии пишут
=============
а про это не очень

uniform register set
SI, DI, SP, BP-- нет 8битных кусочков
теперь и у них можно:
sil, dil, spl, bpl

при изменении младшую 32бит часть регистра общего назначения, то старшие 32бит обнуляются
при изменении word, byte ничего такого не происходит

================
как всё это получилось?

всё это доступно только в кружочке 64бит mode

префикс rax(или rex). код от 0x40 до 0x4f
эти опкоды -- на самом деле inc/dec регистр
отныне в 64бит режиме это больше не команды. придётся использовать полную форму inc/dec(более длинные опкоды)

несколько пострадали регистры ah, bh, ch, dh:
нельзя mov ah, r8b.
невозможно обратиться к [abcd]h и R[8-15]B в одной команде. это всё опять rex сломал

будут ограничения и похуже.

=================
ещё 8 xmm регистров! xmm8--xmm15

=================
сильно упростили сегментную модель

оставили:
cs: R, D, DPL --- битность и права доступа
база, лимит, ... --- не используются

ds, es, ss: ничего вообще не оставили
база = 0, лимит = \inf

fs, gs: оставили базу (64бит через MSR)

если мы обращаемся к rax, то на самом деле - rax + база fs

=================
расширили возможность в адресе

16бит: [bx|bp + si|di + off]
32бит: [регистр + регистр\esp * 1248 + off]
64бит: [rax...r15 + 1248 * (rax...r15 \ esp) + signed32 offset]
   или [rip + signed32 offset] --- без этого было бы жить очень печально. скоро станет понятно, почему

и так почему же?
64бит константы можно использовать только в малом числе команд
есть всего 12 опкодов, в которых можно использовать 64бит константы:
mov Register64, const64
mov al...rax, [64 offset]
mov [64 offset], al..rax
только регистр-аккумулятор!

процессоры понимают команды длиной от 1 до 15 байт!
если скормить более длинную, то процессор огорчится

======================
решили удалить ненужные команды, ибо кодов для новых команд не осталось

выкинули все команды двоично-десятичной арифметики:
aaa, aad, aam, aas, daa, das
с помощью das можно было красиво делать из числа hex-циферку :'(
bound, into вообще никому не нужны. поделом им
pusha(d)/popa(d) :'(
lds, les (двойная прогрузка сегментого регистра и ещё чего-то) -- действительно не нужны. эти опкоды уже используются под другие команды
salc (в зависимости от значения флага переноса выставить al во все 0/во все 1)
push cs, es, ds, ss
pop es, ds, ss
pop cs уже давно убит
jmp/call far absolute
arpl -> movsxd  (проверяла права)
inc/dec однобайтные версии -> опкоды с префиксом rex
\x82 - потому что то же самое, что \x80 
sahf/lahf -- загрузить флаги в аккумулятор/наоборот. эмуляторописатели негодуют! поэтому через жопу им её вернули: при попытке сделать эту команды идёт прерывание, его обработчик выполняет эту команду и возвращает управление
sisenter/sisexit -- не надо ими пользоваться! давайте вместо них siscall/sisret. кладёшь в регистры параметры, делаешь siscall(вместо int 80h), система делает sisret

====================
Конвенции вызова

осталось только две - microsoft и все остальные

микрософтовская конвениця называется fastcall64. в 64винде используется она и только она
параметры передаются в регистрах:
    rcx, rdx, r8, r9 или xmm0--3
или работает так: 
    если функция принимает целые, то первый тип, 
    вещественные -- второй

f(int A,  int B. double C, int D, double E)
push [E]
mov rcx, A
mov rdx, B
mov r9, D
mov xmm2, [C]

СОХРАНЯТЬ: rbx, rsi, rdi, rbp, r12-r15, xmm6-15 --- за xmm можно их ненавидеть
xmm недавно расширили до 256 бит. при этом, младшие xmm6-15 нужно сохранять, а старшие можно портить

у обеих конвениций есть особенность. 32 байта shadow space
перед тем, как сделать call, мы должны на стеке выделить 32 байта места, куда функция может сохранить данные,
которые пришли ей в регистрах

перед call-ом стек должен быть выровнен на 16
команды movdqa xmm, []. если обращение происходит по некратному 16 адресу эти команды падают
чтобы можно было нахаляву грузить xmm-регистры на стек, надо его выравнивать по 16

возврат в rax или xmm0

====
нормальная конвенция. Unix64(amd64)

первые параметры в регистрах
rdi, rsi, rdx, rcx, r8, r9, xmm0-7

f(int A, int B, double C, int D, double E)
rdi <- A
rsi <- B
xmm0 <- C
rdx <- D
xmm1 <- E

количество параметров в функции с переменным числом параметров, 
в rax нужно записать число, сколько в xmm* поназаписали параметров

в случае siscall-а то, что в rcx идёт в r10

нужно сохранять rbx, rbp, r12-r15

возвращаемое значение: rax | rax:rdx | xmm0 | xmm1:xmm0

особенность -- red zone. функции гарантируется, что [rsp - 128]..[rsp - 8] никто не испортит
